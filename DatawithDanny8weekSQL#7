Part A. High Level Sales Analysis

--1. What was the total quantity sold for all products?

select pd.product_name, sum(s.qty) as qty from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.product_name
order by qty desc

--2. What is the total generated revenue for all products before discounts?

with i as (select s.price * s.qty as revenue from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id)

select sum(revenue) as tot_revenue from i

--3. What was the total discount amount for all products?

select round(sum((discount*(qty*s.price)/100.0)),2) as Total_Discount
from balanced_tree.sales s 
inner join balanced_tree.product_details pd
on s.prod_id=pd.product_id
 
 B. Transaction Analysis
 
 --1. How many unique transactions were there?
 
select count(Distinct txn_id)
from balanced_tree.sales

--2. What is the average unique products purchased in each transaction?

with i as (select count(Distinct prod_id) as c
from balanced_tree.sales
group by txn_id)

select round(avg(c)) as avg_unique_products from i

--3. What are the 25th, 50th and 75th percentile values for the revenue per transaction?

with i as (select txn_id,sum(s.price * s.qty) as tot_revenue from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by txn_id)

select percentile_cont(0.25) within group (order by tot_revenue) as pc_25,
percentile_cont(0.5) within group (order by tot_revenue) as pc_50,
percentile_cont(0.75) within group (order by tot_revenue) as pc_75
from i

--4. What is the average discount value per transaction?

with i as (select s.txn_id, round(sum((discount*(qty*s.price)/100.0)),2) as revenue from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by s.txn_id)

select round(avg(revenue),2) as avg_discount_value from i

--5. What is the percentage split of all transactions for members vs non-members?

with i as (
  SELECT
    member,
    COUNT(DISTINCT txn_id) AS transactions
  FROM balanced_tree.sales
  GROUP BY member
)
SELECT
  member,
  transactions,
  ROUND(100 * transactions / SUM(transactions) over ()) as percentage
FROM i
GROUP BY member, transactions

--6. What is the average revenue for member transactions and non-member transactions?

WITH cte_member_revenue AS (
  SELECT
    member,
   
    SUM(price * qty) AS revenue
  FROM balanced_tree.sales
  GROUP BY member, txn_id
)
SELECT
  member,
  PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY revenue) AS avg_revenue
FROM cte_member_revenue
GROUP BY member

Part C. Product Analysis

--1. What are the top 3 products by total revenue before discount?

select distinct pd.product_id, pd.product_name, sum(s.price * s.qty) as revenue from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.product_name, pd.product_id
order by revenue desc
limit 3

--2. What is the total quantity, revenue and discount for each segment?

select pd.segment_id, pd.segment_name, sum(s.qty) as tot_qty, sum(s.price * s.qty) as tot_rev, round(sum((s.discount*(s.qty*s.price)/100.0)),2) as tot_discount from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.segment_id, pd.segment_name

--3. What is the top selling product for each segment?

with i as (select pd.segment_id, pd.segment_name, s.prod_id, pd.product_name, sum(s.qty) as qt from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.segment_id, pd.segment_name, s.prod_id, pd.product_name)
, j as (select *, rank() over (partition by segment_id order by qt desc) as r from i)

select segment_id, segment_name, prod_id, product_name, qt from j
where r = 1
order by qt desc

--4. What is the total quantity, revenue and discount for each category?

select pd.category_id, pd.category_name, sum(s.qty) as tot_qty, sum(s.price * s.qty) as tot_rev, round(sum((s.discount*(s.qty*s.price)/100.0)),2) as tot_discount from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.category_id, pd.category_name

--5. What is the top selling product for each category?

with i as (select pd.category_id, pd.category_name, s.prod_id, pd.product_name, sum(s.qty) as qt from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.category_id, pd.category_name, s.prod_id,pd.product_name)
, j as (select *, rank() over (partition by category_id order by qt desc) as r from i)

select category_id, category_name, prod_id, product_name, qt from j
where r = 1
order by qt desc

--6. What is the percentage split of revenue by product for each segment?

with i as (select pd.segment_id, pd.segment_name, s.prod_id, pd.product_name, sum(s.qty * s.price) as revenue from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.segment_id, pd.segment_name, s.prod_id, pd.product_name)

select *, round((revenue/sum(revenue) over (partition by segment_id))*100,2) as perc_split from i
group by segment_id, segment_name, prod_id, product_name, revenue
order by segment_id, perc_split desc

--7. What is the percentage split of revenue by segment for each category?

with i as (select pd.segment_id, pd.segment_name, pd.category_id, pd.category_name, sum(s.qty * s.price) as revenue from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.segment_id, pd.segment_name, pd.category_id, pd.category_name)

select *, round((revenue/sum(revenue) over (partition by category_id))*100,2) as perc_split from i
group by segment_id, segment_name, category_id, category_name, revenue
order by segment_id, perc_split desc

--8. What is the percentage split of total revenue by category?

with i as (select pd.category_id, pd.category_name, sum(s.qty * s.price) as revenue from balanced_tree.sales as s
inner join balanced_tree.product_details as pd
on pd.product_id = s.prod_id
group by pd.category_id, pd.category_name)

select *, round((revenue/sum(revenue) over ())*100,2) as perc_split from i
group by category_id, category_name, revenue

--9. What is the total transaction “penetration” for each product? (hint: penetration = number of transactions where at least 1 quantity of a product was purchased divided by total number of transactions)

select product_name, round(count(distinct txn_id)*100.0/(select count(distinct txn_id) from balanced_tree.sales),2) as penetration
from balanced_tree.sales as s
inner join balanced_tree.product_details as pd 
on s.prod_id = pd.product_id
where qty>=1
group by product_name
order by 2 desc

--10. What is the most common combination of at least 1 quantity of any 3 products in a 1 single transaction?

with base as (
select s.txn_id,s.prod_id,product_name
from balanced_tree.sales s
inner join balanced_tree.product_details pd 
on s.prod_id = pd.product_id
)
select top 1 a.product_name, b.product_name, c.product_name , count(*) as combination_count
from balanced_tree.base a 
inner join balanced_tree.base b
on a.txn_id = b.txn_id 
inner join balanced_tree.base c 
on b.txn_id = c.txn_id 
where a.prod_id < b.prod_id and  b.prod_id < c.prod_id
group by a.product_name, b.product_name, c.product_name 
order by 4 desc

Super bonus - what are the quantity, revenue, discount and net revenue from the top 3 products in the transactions where all 3 were purchased?

select category_name,segment_name,s.prod_id,p.product_name,sum(qty) as sold,sum((qty*s.price)*(1-discount*0.01)) as Total_Revenues,
round(sum((discount*(qty*s.price)/100.0)),2) as Total_Discount,
round(sum((qty*s.price)*(1-discount*0.01)) *100.0/ (select sum((qty*price)*(1-discount*0.01)) from sales),2) as revenue_prcnt,
count(distinct txn_id)*100.0/(select count(distinct txn_id) from sales ) as penetration,
 sum(case when member='t' then 1 else 0 end)*100.0/count(*) as member_transaction,
sum(case when member='f' then 1 else 0 end)*100.0/count(*) as non_member_transaction,
avg(case when member='t' then (qty*s.price)*(1-discount*0.01) end) as avg_revenue_member,
avg(case when member='f' then (qty*s.price)*(1-discount*0.01) end) as avg_revenue_non_member
from sales s join product_details p 
on s.prod_id=p.product_id
where datename(month,start_txn_time)='January'
group by category_name,segment_name,s.prod_id,p.product_name
order by 1,2,6 desc






